{"version":3,"sources":["styles.js","contexts/cut-details-context.js","utils/aggregations/board-aggregations.js","contexts/view-context.js","components/results/results-table.js","components/item-selector/item-selector.js","utils/measurements.js","components/views/board-view.js","components/views/cut-view.js","components/cut-details/cut-details.js","components/menu/top-nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","label","marginBottom","DEFAULT_STATE","board","value","feet","inch","fraction","boardLength","concat","CutDetailsContext","React","createContext","CutDetailsProvider","props","useState","cutDetails","setCutDetails","Provider","children","ViewContext","ViewProvider","view","setView","ResultsTable","data-testid","Object","entries","map","key","ft","in","fr","ItemSelector","useContext","containerClassName","append","measurement","inputs","type","className","onChange","event","item","target","optionLabel","options","option","inches","fractions","BoardView","Form","style","Styles","CutView","bladeWidth","styleFooter","position","left","bottom","width","textAlign","CutDetails","showResults","cut","color","onClick","menuStyles","TopNav","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8c2871d.chunk.js","sourcesContent":["const label = {\n    marginBottom: '2rem'\n};\n\nmodule.exports = {\n    label\n}\n","import React from 'react';\nimport {aggregateBoard} from '../utils/aggregations/board-aggregations';\n\nconst DEFAULT_STATE = {\n    board: {\n        value: aggregateBoard,\n        label: 'Board Length'\n    }\n};\n\nexport const CutDetailsContext = React.createContext(DEFAULT_STATE);\n\nexport const CutDetailsProvider = props => {\n    const [cutDetails, setCutDetails] = React.useState(DEFAULT_STATE);\n\n    return (\n        <CutDetailsContext.Provider value={{ cutDetails, setCutDetails }}>\n            {props.children}\n        </CutDetailsContext.Provider>\n    )\n}","export const aggregateBoard = (feet, inch, fraction) => {\n    let boardLength = '';\n\n    if (feet) {\n        boardLength = boardLength.concat(`${feet}' `);\n    }\n\n    if (inch && fraction) {\n        boardLength = boardLength.concat(`${inch} ${fraction}\"`)\n    } else if (inch) {\n        boardLength = boardLength.concat(`${inch}\"`);\n    } else if (fraction) {\n        boardLength = boardLength.concat(`${fraction}\"`)\n    }\n\n    return boardLength;\n}","import React from 'react';\n\nconst DEFAULT_STATE = {\n    board: true\n};\n\nexport const ViewContext = React.createContext(DEFAULT_STATE);\n\nexport const ViewProvider = props => {\n    const [view, setView] = React.useState(DEFAULT_STATE);\n\n    return (\n        <ViewContext.Provider value={{ view, setView }}>\n            {props.children}\n        </ViewContext.Provider>\n    )\n}\n","import React from 'react';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\n\nexport const ResultsTable = props => {\n    const renderTableDetails = () => {\n        return Object.entries(props.cutDetails).map(([key, value]) => {\n            if (key === 'board') {\n                return (\n                    <tr key={key}>\n                        <td>{value.label}</td>\n                        <td>{value.value(value.ft, value.in, value.fr)}</td>\n                    </tr>\n                );\n            }\n\n            return (\n                <tr key={key}>\n                    <td>{value.label}</td>\n                    <td>{value.value}</td>\n                </tr>\n            );\n        });\n    };\n\n    return (\n        <div data-testid={'cut-results'}>\n            <MDBTable>\n                <MDBTableHead>\n                    <tr>\n                        <th>Label</th>\n                        <th>Value</th>\n                    </tr>\n                </MDBTableHead>\n                <MDBTableBody>\n                    {renderTableDetails()}\n                </MDBTableBody>\n            </MDBTable>\n        </div>\n    );\n};\n","import React from 'react';\nimport { MDBInputGroup } from 'mdbreact';\nimport { CutDetailsContext } from '../../contexts/cut-details-context';\n\nexport const ItemSelector = props => {\n    const { cutDetails, setCutDetails } = React.useContext(CutDetailsContext);\n\n    const handleChange = (event) => {\n        setCutDetails({\n            ...cutDetails,\n            [props.type]: {\n                ...props.item,\n                [props.measurement]: event.target.value\n            }\n        });\n    }\n\n    const renderOptions = () => {\n        return props.options.map(option => {\n            return <option key={option}>{option}</option>\n        });\n    };\n\n    return (\n        <MDBInputGroup\n            containerClassName=\"mb-3\"\n            append={props.measurement}\n            inputs={\n                <select\n                    data-testid={`selector-input-${props.type}-${props.measurement}`}\n                    className=\"browser-default custom-select\"\n                    onChange={handleChange}>\n                    <option>{props.optionLabel}</option>\n                    {renderOptions()}\n                </select>\n            }\n        />\n    )\n}","export const feet = [\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    '11',\n    '12',\n    '13',\n    '14',\n    '15',\n    '16',\n    '17',\n    '18',\n    '19',\n    '20',\n];\n\nexport const inches = [\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    '11',\n    '12'\n];\n\nexport const fractions = [\n    '0',\n    '1/16',\n    '1/8',\n    '3/16',\n    '1/4',\n    '5/16',\n    '3/8',\n    '7/16',\n    '1/2',\n    '9/16',\n    '5/8',\n    '11/16',\n    '3/4',\n    '13/16',\n    '7/8',\n    '15/16',\n    '1'\n];","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { ItemSelector } from '../item-selector/item-selector';\nimport { feet, inches, fractions } from '../../utils/measurements';\nimport { CutDetailsContext } from '../../contexts/cut-details-context';\nimport Styles from '../../styles';\n\nexport const BoardView = () => {\n    const { cutDetails } = React.useContext(CutDetailsContext);\n    \n    return (\n        <Form data-testid={'cut-details-form'}>\n            <h4 style={Styles.label}>What is the length of the board?</h4>\n\n            <ItemSelector\n                measurement={'ft'}\n                type={'board'}\n                item={cutDetails.board}\n                options={feet}\n                optionLabel={'Select feet'}\n            />\n\n            <ItemSelector\n                measurement={'in'}\n                type={'board'}\n                item={cutDetails.board}\n                options={inches}\n                optionLabel={'Select inches'}\n            />\n\n            <ItemSelector\n                measurement={'fr'}\n                type={'board'}\n                item={cutDetails.board}\n                options={fractions}\n                optionLabel={'Select fraction of an inch'}\n            />\n        </Form>\n    )\n};\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Styles from '../../styles';\nimport { MDBInput } from 'mdbreact';\nimport { CutDetailsContext } from '../../contexts/cut-details-context';\n\nexport const CutView = () => {\n    const { cutDetails, setCutDetails } = React.useContext(CutDetailsContext);\n\n    const handleBladeChange = (event) => {\n        setCutDetails({\n            ...cutDetails,\n            bladeWidth: {\n                value: event.target.value,\n                label: 'Blade Width'\n            }\n        })\n    }\n\n    return (\n        <Form>\n            <h4 style={Styles.label}>How wide is your saw blade?</h4>\n            <MDBInput\n                data-testid={'blade-input'}\n                label={'Blade width'}\n                onChange={handleBladeChange}\n            />\n        </Form>\n    );\n}","import React from 'react';\nimport './cut-details.css'\nimport { CutDetailsContext } from '../../contexts/cut-details-context';\nimport { ViewContext } from '../../contexts/view-context';\nimport { ResultsTable } from '../results/results-table';\nimport { BoardView } from '../views/board-view';\nimport { CutView } from '../views/cut-view';\nimport { MDBBtn } from 'mdbreact';\n\nconst styleFooter = {\n    position: 'fixed',\n    left: 0,\n    bottom: 0,\n    width: '100%',\n    textAlign: 'center',\n    marginBottom: '1rem'\n};\n\nexport const CutDetails = () => {\n    const { cutDetails } = React.useContext(CutDetailsContext);\n    const { view, setView } = React.useContext(ViewContext);\n\n    const showResults = cutDetails.board.ft || cutDetails.board.in || cutDetails.board.fr;\n    const handleBack = () => setView({\n        board: true,\n        cut: false\n    });\n\n    const handleNext = () => setView({\n        board: false,\n        cut: true\n    });\n\n    return (\n        <div>\n            {view.board && <BoardView />}\n            {view.cut && <CutView />}\n            {showResults && <ResultsTable cutDetails={cutDetails} />}\n            <div style={styleFooter}>\n                {view.cut && <MDBBtn color='info' onClick={handleBack}>Back</MDBBtn>}\n                <MDBBtn onClick={handleNext}>Next</MDBBtn>\n            </div>\n        </div>\n    )\n};\n","import React from 'react';\nimport { MDBNav } from 'mdbreact';\n\nconst menuStyles = {\n  color: 'white'\n};\n\nexport const TopNav = () => {\n  return (\n    <MDBNav color='aqua-gradient' className='font-weight-bold py-4 px-2 mb-5' style={menuStyles}>\n      Woodworking Calculator\n    </MDBNav>\n  )\n}","import React from 'react';\nimport { CutDetails } from './components/cut-details/cut-details';\nimport { TopNav } from './components/menu/top-nav';\nimport { CutDetailsProvider } from './contexts/cut-details-context';\nimport { MDBContainer } from 'mdbreact';\nimport { ViewProvider } from './contexts/view-context';\n\nfunction App() {\n  return (\n    <ViewProvider>\n      <CutDetailsProvider>\n        <TopNav />\n        <MDBContainer>\n          <CutDetails />\n        </MDBContainer>\n      </CutDetailsProvider>\n    </ViewProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}