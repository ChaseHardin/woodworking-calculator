{"version":3,"sources":["contexts/cut-details-context.js","components/item-selector/item-selector.js","utils/feet.js","components/cut-details/cut-details.js","components/menu/top-nav.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_STATE","CutDetailsContext","React","createContext","CutDetailsProvider","props","useState","cutDetails","setCutDetails","Provider","value","children","ItemSelector","useContext","containerClassName","append","measurementType","inputs","data-testid","className","onChange","event","detailType","parseInt","target","options","map","option","key","feet","CutDetails","Form","style","marginBottom","boardLengthFt","menuStyles","color","TopNav","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAEMA,EAAgB,GAETC,EAAoBC,IAAMC,gBAE1BC,EAAqB,SAAAC,GAAU,IAAD,EACHH,IAAMI,SAASN,GADZ,mBAChCO,EADgC,KACpBC,EADoB,KAGvC,OACI,kBAACP,EAAkBQ,SAAnB,CAA4BC,MAAO,CAACH,aAAYC,kBAC3CH,EAAMM,W,gBCPNC,EAAe,SAAAP,GAAU,IAC1BG,EAAkBN,IAAMW,WAAWZ,GAAnCO,cAcR,OACI,kBAAC,IAAD,CACIM,mBAAmB,OACnBC,OAAQV,EAAMW,gBACdC,OACI,4BACIC,cAAa,sBACbC,UAAU,gCACVC,SApBK,SAACC,GAClBb,EAAc,eACTH,EAAMiB,WAAaC,SAASF,EAAMG,OAAOd,WAmBlC,+CAdLL,EAAMoB,QAAQC,KAAI,SAAAC,GACrB,OAAO,4BAAQC,IAAKD,GAASA,UCf5BE,EAAO,CAChB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MCdSC,EAAa,WAAO,IACrBvB,EAAeL,IAAMW,WAAWZ,GAAhCM,WAMR,OACI,kBAACwB,EAAA,EAAD,CAAMb,cAAa,oBACf,wBAAIc,MANO,CACfC,aAAc,SAKV,oCAEA,kBAAC,EAAD,CACIjB,gBAAiB,KACjBM,WAAY,gBACZG,QAASI,IAGb,yBAAKX,cAAa,eACbX,EAAW2B,iBCtBtBC,EAAa,CACjBC,MAAO,SAGIC,EAAS,WACpB,OACE,kBAAC,IAAD,CAAQD,MAAM,gBAAgBjB,UAAU,kCAAkCa,MAAOG,GAAjF,2BCQWG,MAXf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b51fd57.chunk.js","sourcesContent":["import React from 'react';\n\nconst DEFAULT_STATE = {};\n\nexport const CutDetailsContext = React.createContext();\n\nexport const CutDetailsProvider = props => {\n    const [cutDetails, setCutDetails] = React.useState(DEFAULT_STATE);\n\n    return (\n        <CutDetailsContext.Provider value={{cutDetails, setCutDetails}}>\n            {props.children}\n        </CutDetailsContext.Provider>\n    )\n}","import React from 'react';\nimport { MDBInputGroup } from 'mdbreact';\nimport { CutDetailsContext } from '../../contexts/cut-details-context';\n\nexport const ItemSelector = props => {\n    const { setCutDetails } = React.useContext(CutDetailsContext);\n\n    const handleChange = (event) => {\n        setCutDetails({\n            [props.detailType]: parseInt(event.target.value)\n        });\n    }\n\n    const renderOptions = () => {\n        return props.options.map(option => {\n            return <option key={option}>{option}</option>\n        });\n    };\n\n    return (\n        <MDBInputGroup\n            containerClassName=\"mb-3\"\n            append={props.measurementType}\n            inputs={\n                <select\n                    data-testid={'item-selector-input'}\n                    className=\"browser-default custom-select\"\n                    onChange={handleChange}>\n                    <option>Select feet</option>\n                    {renderOptions()}\n                </select>\n            }\n        />\n    )\n}","export const feet = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"10\",\n    \"11\",\n    \"12\",\n    \"13\",\n    \"14\",\n    \"15\",\n    \"16\",\n    \"17\",\n    \"18\",\n    \"19\",\n    \"20\",\n];\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport './cut-details.css'\nimport { CutDetailsContext } from '../../contexts/cut-details-context';\nimport { ItemSelector } from '../item-selector/item-selector';\nimport { feet } from '../../utils/feet';\n\nexport const CutDetails = () => {\n    const { cutDetails } = React.useContext(CutDetailsContext);\n\n    const styleLabel = {\n        marginBottom: '2rem'\n    };\n\n    return (\n        <Form data-testid={'cut-details-form'}>\n            <h4 style={styleLabel}>What is the length of the board?</h4>\n\n            <ItemSelector\n                measurementType={'ft'}\n                detailType={'boardLengthFt'}\n                options={feet}\n            />\n\n            <div data-testid={'cut-results'}>\n                {cutDetails.boardLengthFt}\n            </div>\n        </Form>\n    )\n};\n","import React from 'react';\nimport { MDBNav } from 'mdbreact';\n\nconst menuStyles = {\n  color: 'white'\n};\n\nexport const TopNav = () => {\n  return (\n    <MDBNav color='aqua-gradient' className='font-weight-bold py-4 px-2 mb-5' style={menuStyles}>\n      Woodworking Calculator\n    </MDBNav>\n  )\n}","import React from 'react';\nimport { CutDetails } from './components/cut-details/cut-details';\nimport { TopNav } from './components/menu/top-nav';\nimport { CutDetailsProvider } from './contexts/cut-details-context';\nimport { MDBContainer} from 'mdbreact';\n\nfunction App() {\n  return (\n    <CutDetailsProvider>\n      <TopNav />\n      <MDBContainer>\n        <CutDetails />\n      </MDBContainer>\n    </CutDetailsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}