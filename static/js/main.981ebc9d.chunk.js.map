{"version":3,"sources":["components/input-form-group/input-form-group.js","components/cut-details-form/cut-details-form.js","components/calculators/calculate.js","App.js","serviceWorker.js","index.js"],"names":["InputFormGroup","label","placeholder","onChange","Form","Group","Label","className","data-testid","Control","CutDetailsForm","useState","details","setDetails","handleBoardLength","React","useCallback","e","handleOnChange","handleNumberOfCuts","handleBladeWidth","name","target","value","showCutDetails","boardLength","numberOfCuts","bladeWidth","Fragment","calculate","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAGaA,EAAiB,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAChD,OACI,kBAACC,EAAA,EAAKC,MAAN,KACKJ,GAAS,kBAACG,EAAA,EAAKE,MAAN,CAAYC,UAAU,aAAaC,cAAaP,GAAQA,GAClE,kBAACG,EAAA,EAAKK,QAAN,CAAcP,YAAaA,EAAaC,SAAUA,MCDjDO,G,MAAiB,WAAO,IAAD,EACFC,mBAAS,IADP,mBACzBC,EADyB,KAChBC,EADgB,KAG1BC,EAAoBC,IAAMC,aAAY,SAACC,GAAD,OAAOC,EAAeD,EAAG,kBAC/DE,EAAqBJ,IAAMC,aAAY,SAACC,GAAD,OAAOC,EAAeD,EAAG,mBAChEG,EAAmBL,IAAMC,aAAY,SAACC,GAAD,OAAOC,EAAeD,EAAG,iBAE9DC,EAAiB,SAACD,EAAGI,GACvBR,EAAW,2BACJD,GADG,kBAELS,EAAOJ,EAAEK,OAAOC,UAInBC,EAAiBZ,GAAWA,EAAQa,aAAeb,EAAQc,cAAgBd,EAAQe,WAEzF,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKpB,cAAa,WACbgB,GAAkB,8BCzBV,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,aAIpC,OAF6BD,EADLC,EAD0C,EAAhBC,YAIpBD,EDqBQG,CAAUjB,KAExC,kBAACR,EAAA,EAAD,CAAMI,cAAa,oBACf,kBAAC,EAAD,CACIP,MAAM,kBACNC,YAAY,iCACZC,SAAUW,IAEd,kBAAC,EAAD,CACIb,MAAM,SACNC,YAAY,iCACZC,SAAUgB,IAEd,kBAAC,EAAD,CACIlB,MAAM,cACNC,YAAY,iBACZC,SAAUiB,Q,QEzBfU,MAVf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,SCEYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.981ebc9d.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\n\nexport const InputFormGroup = ({label, placeholder, onChange}) => {\n    return (\n        <Form.Group>\n            {label && <Form.Label className='form-label' data-testid={label}>{label}</Form.Label>}\n            <Form.Control placeholder={placeholder} onChange={onChange}/>\n        </Form.Group>\n    );\n}","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { InputFormGroup } from '../input-form-group/input-form-group';\nimport './cut-details-form.css';\nimport {calculate} from '../calculators/calculate';\n\nexport const CutDetailsForm = () => {\n    const [details, setDetails] = useState({});\n\n    const handleBoardLength = React.useCallback((e) => handleOnChange(e, 'boardLength'));\n    const handleNumberOfCuts = React.useCallback((e) => handleOnChange(e, 'numberOfCuts'));\n    const handleBladeWidth = React.useCallback((e) => handleOnChange(e, 'bladeWidth'));\n\n    const handleOnChange = (e, name) => {\n        setDetails({\n            ...details,\n            [name]: e.target.value\n        });\n    };\n\n    const showCutDetails = details && details.boardLength && details.numberOfCuts && details.bladeWidth;\n\n    return (\n        <React.Fragment>\n            <div data-testid={'results'}>\n                {showCutDetails && <span>{calculate(details)}</span>}\n            </div>\n            <Form data-testid={'cut-details-form'}>\n                <InputFormGroup \n                    label='Length of Board' \n                    placeholder='Length of board before cutting' \n                    onChange={handleBoardLength}\n                />\n                <InputFormGroup \n                    label='Boards' \n                    placeholder='Number of boards after cutting' \n                    onChange={handleNumberOfCuts}\n                    />\n                <InputFormGroup \n                    label='Blade Width' \n                    placeholder='Width of blade' \n                    onChange={handleBladeWidth}\n                    />\n            </Form>\n        </React.Fragment>\n    )\n}","export const calculate = ({boardLength, numberOfCuts, bladeWidth}) => {\n    const totalBladeWaste = numberOfCuts * bladeWidth;\n    const boardAfterBladeWaste = boardLength - totalBladeWaste;\n\n    return boardAfterBladeWaste / numberOfCuts;\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { CutDetailsForm } from './components/cut-details-form/cut-details-form';\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  return (\n    <Container>\n      <div className=\"App\">\n        <CutDetailsForm />\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}